KJumpingCube
============

### Game Description
   KJumpingCube is a simple dice driven tactical game. It is a pure strategy game, involving no element of chance. The playing area consists of squares containing points. Players move by clicking on either a vacant square, or on own square. This version of KJumpingCube allows a user to play against another user or against a computer, or allows computer to play itself.

   The playing area is a box of cubes containing points. When the game starts each cube has one point, no owner and a neutral color. If you click on a neutral cube it becomes yours, changes to your color and increases by one point. Your objective is to capture all the cubes, but now it is your opponent's turn. Players move and add points by clicking on neutral cubes or their own cubes. The only way to capture your opponent's cubes is to increase a cube's value until it reaches a maximum and expands into neighboring cubes. Then those cubes become yours, even if they belonged to your opponent before. Sometimes a neighbor will also reach a maximum value and expand and a cascade of moves will spread across the board. Large numbers of cubes can suddenly change hands and this is where KJumpingCube becomes interesting and challenging.

### Rules

Here are all the rules of this game:

1. A move consists of clicking on a cube that does not belong to your opponent.
2. The move increases the points in the cube by one.
3. At the start of the game, each cube has one point, is painted in a neutral color and has no owner.
4. Each player has a color to mark the ownership of cubes.
5. By clicking a cube that has no owner, the player becomes the owner of that cube and it changes its color to the player's color. Simultaneously the cubeâ€™s value is increased by one.
6. If a cube has more points than it has neighbors, one point jumps to each of the neighbors.
7. During such a move, all the neighboring cubes become owned by the player who moved and so do all of their points, even if the neighbors were neutral or owned by the other player.
8. Neighbors are the cubes located above, below, at left or at right, but not diagonally. Corner cubes have two neighbors, edge cubes have three and center cubes have four.
9. If a move leaves a neighbor with a maximum number of points, the move continues automatically to the neighbor's neighbors and so on, in a cascade. A large number of cubes can change ownership during such a move.
10. The winner is the player who ends up owning all the cubes.
11. You can use settings to select board size, computer players and players' colors. You can also pit one computer player against another and watch the outcome.

### References
1. https://games.kde.org/game.php?game=kjumpingcube
2. https://docs.kde.org/stable/en/kdegames/kjumpingcube/kjumpingcube.pdf
3. https://www.youtube.com/watch?v=kF7foeCNJlI
4. http://www.gamespot.com/kjumpingcube/
5. https://inst.eecs.berkeley.edu/~cs61b/fa14/hw/proj2.pdf
6. https://docs.kde.org/stable/en/kdegames/kjumpingcube/rules_and_tips.html

### CONTENTS:
---------

README                 Introduction File
        
Makefile               For those of you using the standard Unix tool chain
                       rather than Eclipse, this file provides for some
                       simple compilation/testing control.  See the 
                       comments in it for the targets provided.  Those of
                       you using Eclipse will need it on the instructional
                       machines (the commands 'make' and 'make check' must
                       work correctly on your submission, regardless of
                       which editor or IDE you used).




jump61/

    Makefile           A simple makefile that delegates all requests to
                       the outer directory's makefile.
                        
    Main.java          Entry point to program. You may modify this if you
                       want, but it will work as it stands.
    UnitTest.java      Main unit-test file, which calls any others.


    The following files in jump61 are all optional.  Use them if you see fit,
    and remove any you don't use.


    Side.java           Defines symbolic names for the colors of squares
                        and players.

    Board.java          The superclass of playing boards.
    Square.java         Used in Board to represent the contents of a single
                        square.

    ConstantBoard.java  A type of Board that delegates operations to another
                        Board and does not allow operations that modify a
                        Board.

    MutableBoard.java   A type of Board whose contents can be changed.

    Game.java           Abstracts the complete state of a game and
                        solicits moves from Players.

    Player.java         The superclass of all types of Players.  A Player is
                        something that makes moves.

    HumanPlayer.java    Represents a player who sits at the terminal typing
                        moves.

    AI.java             An automated (AI) player.

    Defaults.java       Gathering place for default parameters.

    GameException.java  Used for internal signalling of user errors,

    Display.java        A class representing the GUI (use optional).
    BoardWidget.java    Used in the GUI to display the actual board.

    Usage.txt           A resource containing a Usage message.
    Help.txt            A resource containing a summary of commands.

    BoardTest.java      Some unit tests on Boards.

testing/

    Makefile            A Makefile for controlling testing.  The command
                        make check runs the test script over all test cases.

    ReadMe              An explanation of test-jump61's input format.

    test00-1.in         Simple test, showing the format of test files.
                        REMINDER: This is a sample only.  It DOESN'T 
                        constitute an adequate test.  
    test00-1.out        Expected boards output from test00-1.in

    test00-err-1.in     Simple input containing erroneous commands.  The
                        program must report and ignore these commands without
                        crashing.
    test00-err-1.out    Expected boards output by the 'dump' command in
                        command1.in


